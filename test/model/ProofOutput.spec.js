/**
 * Topaz API
 * ## Topaz API Spec  To get up and running with Topaz API as quickly as possible, read through these docs.  ### Prerequisites  Create an account at [https://topaz.io](https://topaz.io), log in, and generate an API Token.  You'll need an API Token to create a new app, create objects, create hashes, and view proofs.  All API requests should be prefixed with `/v1`, indicating that you're targeting version 1 of our API.  ### Guarantee  Topaz API follows Semantic Versioning (https://semver.org), so expect that any breaking changes will be versioned under a new route prefix.
 *
 * OpenAPI spec version: 0.1.17
 * Contact: hello@topaz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'crypto', 'uuid/v4', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('crypto'), require('uuid/v4'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.crypto, root.uuidv4, root.TopazApi);
  }
}(this, function(expect, crypto, uuidv4, TopazApi) {
  'use strict';

  describe('ProofOutput', function() {
    var instance, proofId, merkleRoot, ethTransaction, unixTimestamp, appId;
  
    beforeEach(function() {
      proofId = uuidv4();
      merkleRoot = crypto.createHmac('sha256', '')
        .update(Math.random().toString(36).substr(2, 5))
        .digest('hex');
      ethTransaction = '0x' + crypto.createHmac('sha256', '')
        .update(Math.random().toString(36).substr(2, 5))
        .digest('hex');;
      unixTimestamp = Date.now();
      appId = uuidv4();

      instance = new TopazApi.ProofOutput(proofId, merkleRoot, ethTransaction, unixTimestamp, appId);
    });

    it('should create an instance of ProofOutput', function() {
      expect(instance).to.be.a(TopazApi.ProofOutput);
    });

    it('should have the property id (base name: "id")', function() {
      expect(instance.id).to.be(proofId);
    });

    it('should have the property merkleRoot (base name: "merkleRoot")', function() {
      expect(instance.merkleRoot).to.be(merkleRoot);
    });

    it('should have the property ethTransaction (base name: "ethTransaction")', function() {
      expect(instance.ethTransaction).to.be(ethTransaction);
    });

    it('should have the property unixTimestamp (base name: "unixTimestamp")', function() {
      expect(instance.unixTimestamp).to.be(unixTimestamp);
    });

    it('should have the property appId (base name: "appId")', function() {
      expect(instance.appId).to.be(appId);
    });
  });
}));
