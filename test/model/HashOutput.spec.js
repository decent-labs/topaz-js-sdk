/**
 * Topaz API
 * ## Topaz API Spec  To get up and running with Topaz API as quickly as possible, read through these docs.  ### Prerequisites  Create an account at [https://topaz.io](https://topaz.io), log in, and generate an API Token.  You'll need an API Token to create a new app, create objects, create hashes, and view proofs.  All API requests should be prefixed with `/v1`, indicating that you're targeting version 1 of our API.  ### Guarantee  Topaz API follows Semantic Versioning (https://semver.org), so expect that any breaking changes will be versioned under a new route prefix.
 *
 * OpenAPI spec version: 0.1.17
 * Contact: hello@topaz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../helpers/random', 'uuid/v4', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../helpers/random'), require('uuid/v4'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.random, root.uuidv4, root.TopazApi);
  }
}(this, function(expect, random, uuidv4, TopazApi) {
  'use strict';

  describe('HashOutput', function() {
    var instance, hash, hashId, objectId, proofId, unixTimestamp;
  
    beforeEach(function() {
      hash = random.sha256HexHash();
      hashId = uuidv4();
      unixTimestamp = Date.now()
      objectId = uuidv4();
      proofId = uuidv4();
      instance = new TopazApi.HashOutput(hash, hashId, unixTimestamp, objectId, proofId);
    });

    it('should create an instance of HashOutput', function() {
      expect(instance).to.be.a(TopazApi.HashOutput);
    });

    it('should have the property id (base name: "id")', function() {
      expect(instance.id).to.be(hashId);
    });

    it('should have the property unixTimestamp (base name: "unixTimestamp")', function() {
      expect(instance.unixTimestamp).to.be(unixTimestamp);
    });

    it('should have the property objectId (base name: "objectId")', function() {
      expect(instance.objectId).to.be(objectId);
    });

    it('should have the property proofId (base name: "proofId")', function() {
      expect(instance.proofId).to.be(proofId);
    });
  });
}));
