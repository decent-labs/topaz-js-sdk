/**
 * Topaz API
 * ## Topaz API Spec  To get up and running with Topaz API as quickly as possible, read through these docs.  ### Prerequisites  Create an account at [https://topaz.io](https://topaz.io), log in, and generate an API Token.  You'll need an API Token to create a new app, create objects, create hashes, and view proofs.  All API requests should be prefixed with `/v1`, indicating that you're targeting version 1 of our API.  ### Guarantee  Topaz API follows Semantic Versioning (https://semver.org), so expect that any breaking changes will be versioned under a new route prefix.
 *
 * OpenAPI spec version: 0.1.17
 * Contact: hello@topaz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProofOutput', 'model/ProofOutputDetailed'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ProofOutput'), require('../model/ProofOutputDetailed'));
  } else {
    // Browser globals (root is window)
    if (!root.TopazApi) {
      root.TopazApi = {};
    }
    root.TopazApi.ProofsApi = factory(root.TopazApi.ApiClient, root.TopazApi.ProofOutput, root.TopazApi.ProofOutputDetailed);
  }
}(this, function(ApiClient, ProofOutput, ProofOutputDetailed) {
  'use strict';

  /**
   * Proofs service.
   * @module api/ProofsApi
   * @version 0.1.17
   */

  /**
   * Constructs a new ProofsApi. 
   * @alias module:api/ProofsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the findProofs operation.
     * @callback module:api/ProofsApi~findProofsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProofOutput>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Proofs
     * This endpoint will return all &#x60;proofs&#x60; associated with an &#x60;app&#x60;.
     * @param {String} appId 
     * @param {module:api/ProofsApi~findProofsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProofOutput>}
     */
    this.findProofs = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling findProofs");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ProofOutput];

      return this.apiClient.callApi(
        '/apps/{appId}/proofs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProofs operation.
     * @callback module:api/ProofsApi~getProofsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProofOutputDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Proof
     * This endpoint will return details about a single proof, given the &#x60;proofId&#x60; passed in as the request parameter.
     * @param {String} appId 
     * @param {String} proofId 
     * @param {module:api/ProofsApi~getProofsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProofOutputDetailed}
     */
    this.getProofs = function(appId, proofId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getProofs");
      }

      // verify the required parameter 'proofId' is set
      if (proofId === undefined || proofId === null) {
        throw new Error("Missing the required parameter 'proofId' when calling getProofs");
      }


      var pathParams = {
        'appId': appId,
        'proofId': proofId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ProofOutputDetailed;

      return this.apiClient.callApi(
        '/apps/{appId}/proofs/{proofId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
