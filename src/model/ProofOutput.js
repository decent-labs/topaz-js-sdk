/**
 * Topaz API
 * ## Topaz API Spec  To get up and running with Topaz API as quickly as possible, read through these docs.  ### Prerequisites  Create an account at [https://topaz.io](https://topaz.io), log in, and generate an API Token.  You'll need an API Token to create a new app, create objects, create hashes, and view proofs.  All API requests should be prefixed with `/v1`, indicating that you're targeting version 1 of our API.  ### Guarantee  Topaz API follows Semantic Versioning (https://semver.org), so expect that any breaking changes will be versioned under a new route prefix.
 *
 * OpenAPI spec version: 0.1.17
 * Contact: hello@topaz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProofCommon'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ProofCommon'));
  } else {
    // Browser globals (root is window)
    if (!root.TopazApi) {
      root.TopazApi = {};
    }
    root.TopazApi.ProofOutput = factory(root.TopazApi.ApiClient, root.TopazApi.ProofCommon);
  }
}(this, function(ApiClient, ProofCommon) {
  'use strict';




  /**
   * The ProofOutput model module.
   * @module model/ProofOutput
   * @version 0.1.17
   */

  /**
   * Constructs a new <code>ProofOutput</code>.
   * The properties that are included when fetching a list of Proof.
   * @alias module:model/ProofOutput
   * @class
   * @implements module:model/ProofCommon
   * @param id {String} 
   * @param merkleRoot {String} 
   * @param ethTransaction {String} 
   * @param unixTimestamp {Number} 
   * @param appId {String} 
   */
  var exports = function(id, merkleRoot, ethTransaction, unixTimestamp, appId) {
    var _this = this;

    ProofCommon.call(_this);
    _this['id'] = id;
    _this['merkleRoot'] = merkleRoot;
    _this['ethTransaction'] = ethTransaction;
    _this['unixTimestamp'] = unixTimestamp;
    _this['appId'] = appId;
  };

  /**
   * Constructs a <code>ProofOutput</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProofOutput} obj Optional instance to populate.
   * @return {module:model/ProofOutput} The populated <code>ProofOutput</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      ProofCommon.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('merkleRoot')) {
        obj['merkleRoot'] = ApiClient.convertToType(data['merkleRoot'], 'String');
      }
      if (data.hasOwnProperty('ethTransaction')) {
        obj['ethTransaction'] = ApiClient.convertToType(data['ethTransaction'], 'String');
      }
      if (data.hasOwnProperty('unixTimestamp')) {
        obj['unixTimestamp'] = ApiClient.convertToType(data['unixTimestamp'], 'Number');
      }
      if (data.hasOwnProperty('appId')) {
        obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {String} merkleRoot
   */
  exports.prototype['merkleRoot'] = undefined;
  /**
   * @member {String} ethTransaction
   */
  exports.prototype['ethTransaction'] = undefined;
  /**
   * @member {Number} unixTimestamp
   */
  exports.prototype['unixTimestamp'] = undefined;
  /**
   * @member {String} appId
   */
  exports.prototype['appId'] = undefined;

  // Implement ProofCommon interface:


  return exports;
}));


